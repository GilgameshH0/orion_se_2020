Задание 4.

Задание 4-1. Случайности - не случайны

Создать класс SequentialRandom с одним полем типа int. Это - immutable класс-контейнер для целого числа.
immutable - это классы, значения полей которых нельзя изменить.

Значение поля можно только прочитать, но не изменить (используйте модифиактор private на поле и создайте только getter)
Значение этого int вычисляется по следующим правилом:
- Значение для первого созданного объекта - случайное
- значение для каждого следующего на 1 больше, чем предыдущее
- У класса есть статический метод resetRandom(), который делает значение следующего созданного объекта - случайным.

Например
new SequentialRandom() // содержит 5 (случайное)
new SequentialRandom() // содержит 6 (на 1 больше)
new SequentialRandom() // содержит 7 (на 1 больше)
SequentialRandom.resetRandom()
new SequentialRandom() // содержит 42 (случайное
new SequentialRandom() // содержит 43) (на 1  больше)

Подсказка: Используйте статическую переменную в классе, чтобы хранить значение предыдущего объекта.






Задание 4-2. Фруктовая неоднозначность
Создать класс Fruit со свойством "вес" типа int и методом toString
Создать наследники:
Apple - с дополнительным свойством цвет (красное, зеленое, желтое) - String
Orange - с дополнительном свойством толщина кожуры - int от 0 до 20
Pineapple - с дополнительным свойством - высота хвоста - int, от 5 до 20

переопределить во всех фруктах toString, чтобы выводил все свойства фрукта и тип фрукта (яблоко, апельсин, ананас)

В классе с main() создать метод getRandomFruit - которое возвращает случаный фрукт со случайными характеристиками.

Обратите внимание, если у вас есть переменная с типом родительского класса,
то в такую переменную можно записывать переменные дочерних классов, например:
Parent parent = new Child();
валидный код, при условии, что class Child extends Parent {...}

Создать массив типа Fruit, заполнить его 4 разными случаными фруктами и вывести их на экран





Задание 4-3. Абстрактный супрематизм

Создать класс Figure, описывающий фигуру на двумерной плоскости с декартовыми координатами центра x,y.
В классе объявить метод square, который вычисляет площадь фигуры. В самом классе Figure метод ничего не делает, поведение определяется в классе-наследниках.
В классе объявить и реализовать метод getQuadrant(), который возвращает четверть на координатной плоскости, в которой лежит центр фигуры.
Для описания четверти используйте int с четырьями значениями: 1,2,3,4. Если четверть определить не удалось - верните -1.

Создать классы-наследники:
Circle - дополнительный параметр радиус, от 1 до 10
Square - дополнительный параметр - длина стороны,от 1 до 10.
IsoscelesTriangle - дополнительные параметры высота и основание, от 1 до 10.

В каждом классе определить метод square, чтобы он правильно считал площадь.

в main'e создать массив на 5 элементов типа Figure, заполните любыми фигурами (не обязательно случайными), выведите все фигуры в формате
"Название фигуры - площадь"
